diff --git a/beamform.py b/beamform.py
index 02eeed8..579c511 100644
--- a/beamform.py
+++ b/beamform.py
@@ -20,6 +20,8 @@ parser.add_argument('flist',
                     help='Name of the flist to process (e.g. tr05_simu)')
 parser.add_argument('chime_dir',
                     help='Base directory of the CHiME challenge.')
+parser.add_argument('sim_dir',
+                    help='Base directory of the CHiME challenge simulated data.')
 parser.add_argument('output_dir',
                     help='The directory where the enhanced wav files will '
                          'be stored.')
@@ -29,6 +31,8 @@ parser.add_argument('model_type',
                     help='Type of model (BLSTM or FW)')
 parser.add_argument('--gpu', '-g', default=-1, type=int,
                     help='GPU ID (negative value indicates CPU)')
+parser.add_argument('--single', '-s', default=0, type=int,
+                    help='0 for multi-channel and channel number (1-6) for single channel')
 args = parser.parse_args()
 
 # Prepare model
@@ -50,7 +54,7 @@ scenario = args.flist.split('_')[-1]
 
 # CHiME data handling
 if scenario == 'simu':
-    flist = gen_flist_simu(args.chime_dir, stage)
+    flist = gen_flist_simu(args.chime_dir, args.sim_dir, stage)
 elif scenario == 'real':
     flist = gen_flist_real(args.chime_dir, stage)
 else:
@@ -85,9 +89,12 @@ for cur_line in tqdm(flist):
     t_net += t.msecs
 
     with Timer() as t:
-        N_mask = np.median(N_masks.data, axis=1)
-        X_mask = np.median(X_masks.data, axis=1)
-        Y_hat = gev_wrapper_on_masks(Y, N_mask, X_mask)
+        if args.single == 0:
+            N_mask = np.median(N_masks.data, axis=1)
+            X_mask = np.median(X_masks.data, axis=1)
+            Y_hat = gev_wrapper_on_masks(Y, N_mask, X_mask)
+        elif args.single >= 1:
+            Y_hat = X_masks.data * Y
     t_beamform += t.msecs
 
     if scenario == 'simu':
@@ -104,9 +111,15 @@ for cur_line in tqdm(flist):
             '{}05_{}_{}'.format(stage, env.lower(), scenario),
             '{}_{}_{}.wav'.format(spk, wsj_name, env.upper())
     )
-    with Timer() as t:
-        audiowrite(istft(Y_hat)[context_samples:], filename, 16000, True, True)
-    t_io += t.msecs
+    if args.single == 0:
+        with Timer() as t:
+            audiowrite(istft(Y_hat)[context_samples:], filename, 16000, True, True)
+        t_io += t.msecs
+    elif args.single >= 1:
+        ch = args.single
+        with Timer() as t:
+            audiowrite(istft(Y_hat[:,ch-1,:])[int(context_samples):], filename, 16000, True, True)
+        t_io += t.msecs
 
 print('Finished')
 print('Timings: I/O: {:.2f}s | Net: {:.2f}s | Beamformer: {:.2f}s'.format(
diff --git a/beamform.sh b/beamform.sh
index 3c7de5a..aaae10d 100755
--- a/beamform.sh
+++ b/beamform.sh
@@ -1,5 +1,5 @@
 #!/usr/bin/env bash
 
 for flist in tr05_simu tr05_real dt05_simu dt05_real et05_simu et05_real; do
-    python beamform.py $flist "$@"
-done
\ No newline at end of file
+     $HOME/miniconda3/bin/python local/nn-gev/beamform.py $flist "$@"
+done
diff --git a/chime_data.py b/chime_data.py
index 0072e1b..9d1ade1 100644
--- a/chime_data.py
+++ b/chime_data.py
@@ -11,7 +11,7 @@ from fgnt.signal_processing import stft
 from fgnt.utils import mkdir_p
 
 
-def gen_flist_simu(chime_data_dir, stage, ext=False):
+def gen_flist_simu(chime_data_dir, dest_dir, stage, ext=False):
     with open(os.path.join(
             chime_data_dir, 'annotations',
             '{}05_{}.json'.format(stage, 'simu'))) as fid:
@@ -21,7 +21,7 @@ def gen_flist_simu(chime_data_dir, stage, ext=False):
     else:
         isolated_dir = 'isolated'
     flist = [os.path.join(
-            chime_data_dir, 'audio', '16kHz', isolated_dir,
+            dest_dir, 'audio', '16kHz', isolated_dir,
             '{}05_{}_{}'.format(stage, a['environment'].lower(), 'simu'),
             '{}_{}_{}'.format(a['speaker'], a['wsj_name'], a['environment']))
              for a in annotations]
@@ -65,7 +65,7 @@ def get_audio_data_with_context(embedded_template, t_start, t_end,
 
 def prepare_training_data(chime_data_dir, dest_dir):
     for stage in ['tr', 'dt']:
-        flist = gen_flist_simu(chime_data_dir, stage, ext=True)
+        flist = gen_flist_simu(chime_data_dir, dest_dir, stage, ext=True)
         export_flist = list()
         mkdir_p(os.path.join(dest_dir, stage))
         for f in tqdm.tqdm(flist, desc='Generating data for {}'.format(stage)):
